#!/bin/bash

set -euo pipefail

# Script metadata
SCRIPT_NAME=$(basename "$0")
VERSION="1.1"

# Default settings
BLUR_INTENSITY=6
LOGO_SCALE=0.8
USE_LOGO=0

# Generate unique temporary file names and ensure they donâ€™t exist
SCREENSHOT_FILE=$(mktemp --tmpdir i3lock-wrapper-XXXXXXXXXX.png)
rm -f "$SCREENSHOT_FILE"
BLURRED_FILE=$(mktemp --tmpdir i3lock-wrapper-XXXXXXXXXX.png)
rm -f "$BLURRED_FILE"

# Cleanup function to securely remove temporary files
cleanup() {
    if command -v shred >/dev/null 2>&1; then
        shred -u "$SCREENSHOT_FILE" "$BLURRED_FILE" 2>/dev/null || rm -f "$SCREENSHOT_FILE" "$BLURRED_FILE"
    else
        rm -f "$SCREENSHOT_FILE" "$BLURRED_FILE"
    fi
}
trap cleanup EXIT

# Display usage information
usage() {
    cat <<EOF
Usage: $SCRIPT_NAME [options]

A wrapper around i3lock that sets a blurred screenshot as the background.

Options:
  -v, --version               Show version information
  -l, --logo                  Superimpose a padlock logo
  -h, --help                  Show this help message
  i3lock options: -n, -b, -d, -I sec, -u, -p win|default, -e, -f
                      (See 'i3lock --help' for details)

All options except '-l' and '-h' are passed to i3lock.
EOF
}

# This is a gzipped i3lock-icon.svg converted into pdf with base64 applied
img_pdf_gz () {
    cat <<EOF
H4sICKMgz1MAA2kzbG9jay1pY29uLnBkZgCVkm1IU1EYx7NI7FpBSWSheYgsDdvu3d2920xGbk4b
JulMQtLoenc2r63dde5ZLasPRfWpwOpDEGmUgwrUsugVsoSkULP3FAp6n6H2RtELBXV23aa0vnS5
nHvu75znOc//+Z/M0oLCJYyGozLPv2v7SbGABnJNHZWXB7QroNeNa4GeIAcFANAWSh4MEfl6BAwL
oCg7IWU2UwpGUNhABY7AA/neG3SS7Zt58rDmJDNwnQklVQT7cu7bnvws7prSt/xB9Tz+1++NHcW2
mfPTP/5+NTj9Q8as99dsuYdTSytGHr1Irr/Zh2clHlt8aX5PQihx4cmrnYm3y6oPJo+ce76hZTiv
YU9V89ogH6gaaq3hpvnbmKFKUMzuLOigvwSlqcaBztRGaSil+WHC4zN7On39+ZzltGy58HbpMstO
4+HpdZPWG6X0xuAEW9B16M1BPjX9UW37jCt360q629cg+73tjScyOE+o55TOkTFnQf2imyHd26aq
NtveubOPrq+vfPU0Z3Pa+Tv9vV1NafuK2r6n9LqOhFZ3B6fldk2yox3zfmzzNzWIF3fvOr5x4UAW
v+7Wp6Sy15dDO14O3r0+seVe/v7sPN/Wrs9fzT01Zwtb6RO99jfSyzLzs+7WXwm44cAmCnqdkVaS
WdgEfcQM0ntWR0epLmaRaootgIvKMTEEjIIwE2gQNtCaDxigFQUyEpvIAhnJG8nDjbN61RYfBNpS
wQ3VnKUCgl5MwqLOl0CnJFjkAFhDEA2MJg1nIo8RMCytYcNTPahWd1plLyaxCmBjwUVI9vvGVTd6
mEqjqJxQJHgVX/hgcUsU2wFGfhj9s5JdBXCTJEJHkSUiJ8wdUJH9SIQK0Klnjklk/ilRUaOKJadC
5IS74IjV7g+rHpeAH5fASqzBMgJZoiAhGTAaRqdheJBVi7EvV6tVqRsJvlpJVDQycmdnj/YSyU6/
CP8rbqwAQ5wCq4AFj+yO+ETURGwaiwkg6KKISRQdewDPcSwHXCDKDCzxR13xxpie1ccxmuHi9zG6
OMbRfBwzkPvxNzPpDGMMI0HyQKSKK5fqISlZ9VOWMTDEro/d65IBH9WoYAFhVaHJYKIyM20rC6k/
+epZU8QEAAA=
EOF
}

# Superimpose a padlock logo on the blurred screenshot
superimpose_padlock() {
    local lockimage
    lockimage=$(mktemp --tmpdir i3lock-logo-XXXXXXXXXX) || {
        echo "Error: Failed to create temporary file for logo." >&2
        exit 1
    }

    # Extract the padlock image (assuming img_pdf_gz provides the encoded data)
    if ! img_pdf_gz | base64 -d | gunzip > "${lockimage}.pdf"; then
        echo "Error: Failed to extract padlock logo." >&2
        rm -f "${lockimage}"
        exit 1
    fi

    # Calculate logo dimensions based on blurred image height
    local height width
    height=$(identify -format "(%f * %H + .5)/1\n" "$LOGO_SCALE" "$BLURRED_FILE" | bc) || {
        echo "Error: Failed to calculate logo height." >&2
        rm -f "${lockimage}.pdf"
        exit 1
    }
    width=$(identify -format "scale=4; t=%W/%H; scale=0; (t * $height + .5)/1\n" "${lockimage}.pdf" | bc) || {
        echo "Error: Failed to calculate logo width." >&2
        rm -f "${lockimage}.pdf"
        exit 1
    }

    # Convert and overlay the logo
    convert -density 600 -background none -resize "${width}x${height}" "${lockimage}.pdf" "${lockimage}.png" || {
        echo "Error: Failed to resize logo." >&2
        rm -f "${lockimage}.pdf" "${lockimage}.png"
        exit 1
    }
    convert -compose Exclusion -composite -gravity center "$BLURRED_FILE" "${lockimage}.png" "$BLURRED_FILE" || {
        echo "Error: Failed to superimpose logo." >&2
        rm -f "${lockimage}.pdf" "${lockimage}.png"
        exit 1
    }

    # Clean up logo temporary files
    rm -f "${lockimage}" "${lockimage}.png" "${lockimage}.pdf"
}

# Generate a blurred screenshot
generate_blurred_screenshot() {
    # Capture the screenshot (-z: silent, -q100: max quality)
    if ! scrot -z -q100 "$SCREENSHOT_FILE"; then
        echo "Error: Failed to capture screenshot." >&2
        exit 1
    fi

    # Verify the screenshot file exists
    if [[ ! -f "$SCREENSHOT_FILE" ]]; then
        echo "Error: Screenshot file '$SCREENSHOT_FILE' was not created." >&2
        exit 1
    fi

    # Blur the screenshot with ImageMagick
    if ! magick "$SCREENSHOT_FILE" -resize 10% -blur "0x$BLUR_INTENSITY" -resize 1000% "$BLURRED_FILE"; then
        echo "Error: Failed to process screenshot with ImageMagick." >&2
        exit 1
    fi

    # Securely remove the original screenshot
    if command -v shred >/dev/null 2>&1; then
        shred -u "$SCREENSHOT_FILE" || rm -f "$SCREENSHOT_FILE"
    else
        rm -f "$SCREENSHOT_FILE"
    fi
}

# Parse command-line arguments
parse_args() {
    local i3lock_args=()
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -v|--version)
                echo "$SCRIPT_NAME $VERSION"
                exit 0
                ;;
            -l|--logo)
                USE_LOGO=1
                shift
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            *)
                i3lock_args+=("$1")
                shift
                ;;
        esac
    done
    # Export i3lock_args to main via an array
    printf '%s\n' "${i3lock_args[@]}" > /tmp/i3lock_args_$$
    trap 'rm -f /tmp/i3lock_args_$$; cleanup' EXIT
}

# Main execution
main() {
    parse_args "$@"
    local i3lock_args=()
    if [[ -f /tmp/i3lock_args_$$ ]]; then
        mapfile -t i3lock_args < /tmp/i3lock_args_$$
    fi

    # Generate the blurred screenshot
    generate_blurred_screenshot

    # Add the padlock logo if requested
    if [[ $USE_LOGO -eq 1 ]]; then
        superimpose_padlock
    fi

    # Launch i3lock with the blurred image
    if ! i3lock -i "$BLURRED_FILE" "${i3lock_args[@]}"; then
        echo "Error: Failed to run i3lock." >&2
        exit 1
    fi
}

# Dependency check
for cmd in scrot magick i3lock identify convert bc; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
        echo "Error: Required command '$cmd' is not installed." >&2
        exit 1
    fi
done

# Run the script
main "$@"
